---
// Advanced SEO Component with Schema Markup
export interface SEOProps {
  title?: string;
  description?: string;
  canonical?: string;
  ogImage?: string;
  noindex?: boolean;
  nofollow?: boolean;
  ogType?: 'website' | 'article' | 'product';
  articleData?: {
    publishedTime?: string;
    modifiedTime?: string;
    author?: string;
    section?: string;
    tags?: string[];
  };
  weatherData?: {
    location?: string;
    temperature?: number;
    humidity?: number;
    conditions?: string;
    alert?: string;
  };
  productData?: {
    name?: string;
    category?: string;
    price?: number;
    availability?: string;
    brand?: string;
  };
}

const {
  title = 'Weather Alerts & Safety Analytics - Real-time Weather Safety Information',
  description = 'Get real-time weather alerts, air quality updates, and product recalls. Stay safe with comprehensive weather safety analytics and emergency preparedness information.',
  canonical = Astro.url.href,
  ogImage = '/images/og-weather-alerts.jpg',
  noindex = false,
  nofollow = false,
  ogType = 'website',
  articleData,
  weatherData,
  productData
} = Astro.props;

const siteName = 'Weather Alerts Analytics';
const siteUrl = 'https://your-domain.com';

// Generate structured data based on page type
const generateStructuredData = () => {
  const baseSchema = {
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: siteName,
    url: siteUrl,
    description: description,
    potentialAction: {
      '@type': 'SearchAction',
      target: `${siteUrl}/search?q={search_term_string}`,
      'query-input': 'required name=search_term_string'
    }
  };

  const schemas = [baseSchema];

  // Organization schema
  schemas.push({
    '@context': 'https://schema.org',
    '@type': 'Organization',
    name: siteName,
    url: siteUrl,
    logo: `${siteUrl}/images/logo.png`,
    contactPoint: {
      '@type': 'ContactPoint',
      telephone: '+1-555-0123',
      contactType: 'customer service',
      availableLanguage: 'English'
    },
    sameAs: [
      'https://twitter.com/weatheralerts',
      'https://facebook.com/weatheralerts',
      'https://instagram.com/weatheralerts'
    ]
  });

  // Article schema for blog posts
  if (articleData && ogType === 'article') {
    schemas.push({
      '@context': 'https://schema.org',
      '@type': 'Article',
      headline: title,
      description: description,
      image: ogImage,
      author: {
        '@type': 'Organization',
        name: siteName
      },
      publisher: {
        '@type': 'Organization',
        name: siteName,
        logo: {
          '@type': 'ImageObject',
          url: `${siteUrl}/images/logo.png`
        }
      },
      datePublished: articleData.publishedTime,
      dateModified: articleData.modifiedTime || articleData.publishedTime,
      mainEntityOfPage: canonical,
      keywords: articleData.tags?.join(', '),
      articleSection: articleData.section
    });
  }

  // Weather schema
  if (weatherData) {
    schemas.push({
      '@context': 'https://schema.org',
      '@type': 'WeatherForecast',
      name: `Weather for ${weatherData.location}`,
      location: {
        '@type': 'Place',
        name: weatherData.location
      },
      temperature: weatherData.temperature,
      humidity: weatherData.humidity,
      weatherCondition: weatherData.conditions,
      alert: weatherData.alert
    });
  }

  // Product schema for affiliate products
  if (productData) {
    schemas.push({
      '@context': 'https://schema.org',
      '@type': 'Product',
      name: productData.name,
      category: productData.category,
      brand: {
        '@type': 'Brand',
        name: productData.brand
      },
      offers: {
        '@type': 'Offer',
        price: productData.price,
        priceCurrency: 'USD',
        availability: `https://schema.org/${productData.availability}`
      }
    });
  }

  // FAQ schema for help pages
  if (Astro.url.pathname.includes('/faq') || Astro.url.pathname.includes('/help')) {
    schemas.push({
      '@context': 'https://schema.org',
      '@type': 'FAQPage',
      mainEntity: [
        {
          '@type': 'Question',
          name: 'How do I receive weather alerts?',
          acceptedAnswer: {
            '@type': 'Answer',
            text: 'Subscribe to our newsletter or enable browser notifications to receive real-time weather alerts and safety information.'
          }
        },
        {
          '@type': 'Question',
          name: 'What areas do you cover?',
          acceptedAnswer: {
            '@type': 'Answer',
            text: 'We provide weather alerts and safety information for all 50 US states, with detailed coverage for major metropolitan areas.'
          }
        },
        {
          '@type': 'Question',
          name: 'Are your weather alerts official?',
          acceptedAnswer: {
            '@type': 'Answer',
            text: 'Our alerts are based on official National Weather Service data and are updated in real-time for accuracy and reliability.'
          }
        }
      ]
    });
  }

  // Breadcrumb schema
  if (Astro.url.pathname !== '/') {
    const pathSegments = Astro.url.pathname.split('/').filter(Boolean);
    const breadcrumbItems = pathSegments.map((segment, index) => ({
      '@type': 'ListItem',
      position: index + 2,
      name: segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, ' '),
      item: `${siteUrl}/${pathSegments.slice(0, index + 1).join('/')}`
    }));

    breadcrumbItems.unshift({
      '@type': 'ListItem',
      position: 1,
      name: 'Home',
      item: siteUrl
    });

    schemas.push({
      '@context': 'https://schema.org',
      '@type': 'BreadcrumbList',
      itemListElement: breadcrumbItems
    });
  }

  return schemas;
};

const schemas = generateStructuredData();
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content="weather alerts, weather safety, emergency preparedness, air quality, product recalls, safety information" />
<meta name="author" content="Weather Alerts Analytics" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta charset="utf-8" />

<!-- Canonical URL -->
<link rel="canonical" href={canonical} />

<!-- Robots Meta -->
{noindex && <meta name="robots" content="noindex" />}
{nofollow && <meta name="robots" content="nofollow" />}
{!noindex && !nofollow && <meta name="robots" content="index, follow" />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={ogType} />
<meta property="og:url" content={canonical} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImage} />
<meta property="og:site_name" content={siteName} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonical} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={ogImage} />
<meta property="twitter:site" content="@weatheralerts" />
<meta property="twitter:creator" content="@weatheralerts" />

<!-- Additional article meta tags -->
{articleData && (
  <>
    <meta property="article:published_time" content={articleData.publishedTime} />
    <meta property="article:modified_time" content={articleData.modifiedTime} />
    <meta property="article:author" content={articleData.author} />
    <meta property="article:section" content={articleData.section} />
    {articleData.tags && articleData.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Favicon and App Icons -->
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="icon" type="image/png" sizes="16x16" href="/icons/favicon-16x16.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/icons/favicon-32x32.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/icons/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="192x192" href="/icons/android-chrome-192x192.png" />
<link rel="icon" type="image/png" sizes="512x512" href="/icons/android-chrome-512x512.png" />
<link rel="manifest" href="/manifest.json" />

<!-- DNS Prefetch for Performance -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//www.google-analytics.com" />
<link rel="dns-prefetch" href="//googletagmanager.com" />

<!-- Preload Critical Resources -->
<link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />

<!-- Structured Data JSON-LD -->
{schemas.map(schema => (
  <script type="application/ld+json" set:html={JSON.stringify(schema)} />
))}

<!-- Google Analytics 4 -->
<script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'GA_MEASUREMENT_ID');
</script>

<!-- AdSense Auto Ads -->
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX" crossorigin="anonymous"></script>

<!-- Microsoft Clarity -->
<script type="text/javascript">
    (function(c,l,a,r,i,t,y){
        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
    })(window, document, "clarity", "script", "CLARITY_PROJECT_ID");
</script>

<!-- Service Worker Registration -->
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('SW registered: ', registration);
        })
        .catch(registrationError => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }
</script>